### 한국어 연어 검색기 작업 로그 ###

9월 26일 결과:
(1) 세종 말뭉치 다루기 좋게 전처리
(2) 앞뒤 window 없이, 대상 형태소가 등장하는 문장에 포함된 모든 형태소 추출 -> find_collocation_window_whole_sentence
(3) 대상 형태소 앞에 위치한 2개 형태소 추출(trigram) -> find_collocation_window_two_at_once
(4) Collocation의 가변적인 길이를 어떻게 포착할 수 있을까?
	-> 대상 형태소 기준으로 앞뒤로 실질 형태소 등장할 때까지 인덱스 이동!! 앞뒤 실질 형태소 포함 그 사이에 등장하는 모든 형태소 포착 (+ 문법 형태소는 품사만 남겨 놓기)

9월 27일 결과:
(1) 가변 윈도우를 이용해서 일단 어느 정도 추출 성공! -> find_collocation_variable_window_at_once
@(2) 같은 pattern이지만 한두개 형태소 때문에 다르게 식별되는 pattern은 어떻게 처리할까? Edit Distance 활용?

10월 25일:
(1) 윈도우에서 IIS 서버 돌리는 데 성공

10월 26일:
@(1) Atom - 왼쪽에 연어 등재 목록 bar 만들기 (품사별로 스위치)
(2) Pycharm - VA, VV entry에 '다' 추가하기  // clear

10월 27일:
(1) Pycharm - 빈도수 탭으로 나누기 // clear
(2) Pycharm - 한 문장에 query가 2번 이상 등장하여 빈도수 튀는 문제 해결하기 // clear
@(3) Pycharm - 형태소 말고 원문 표시? 원문을 복원할 수 있나?

10월 30일:
(1) 작업 로그 정리
(2) Pycharm - 동사 추출시 SS, SF, EP(선어말어미) 제거 -> but, '왔다 갔다'가 '다/EC + 가/VV'로 됨. 어케 처리하지? pre_와 post를 다르게 설정!
(3) Pycharm - 명사 추출시 SS 제거
(4) Pycharm - 꼬꼬마로 세종 태깅 - 너무 오래걸려서 일단 정지... 절반 정도 태깅됨
(5) Pycharm - 프로젝트 정리 및 KoreanCollocationExtractor 프로젝트 별도 생성
(6) Github에 프로젝트 업로드

10월 31일:
(1) Pycharm - 꼬꼬마로 세종 태깅 완료
(2) Pycharm - 꼬꼬마 태깅 결과와 세종 태깅 비교 - 꼬꼬마 태깅 오류가 은근히 많음
(3) Ubuntu - 우분투에서도 서버 돌려보기 - 성공
@(4) 이제 뭐해야 되지? - 웹에서 텍스트 긁어모으기?
(5) KoNLPy 연어 찾기 기능 사용해봄 (https://konlpy-ko.readthedocs.io/ko/v0.4.3/examples/collocations/)

11월 1일:
(1) Pycharm - 추출시 태그 변환 기능 추가 (NNG -> 명사)
(2) Pycharm - split() 함수로 인한 오류 수정 -> 이제 rsplit("/", 1) 사용

11월 2일:
(1) Pycharm - 태그 변환해서 NNG, VV, VA 추출
(2) Pycharm - 세종 코퍼스 태깅 오류 수정
(3) 아이디어 - 연어 클릭시 해당 연어가 등장하는 문장 예시 전시 -> 결국 원문 표시하는 것 // 원문-형태소분석 쌍 만들어 놓으면 해결 가능!

11월 3일:
(1) Pycharm - 원문 복원 성공!
(2) 세종 코퍼스 원본 파일 자체의 텍스트 중복 문제 발견 (BTJO0443) - 같은 글이 4회 반복
(3) Pycharm - 원문 복원시 엉뚱한 문장 추출되는 문제, regex로 해결 // 고생했다 예) '악을 쓰다' 복원시 '음악을 쓰다'도 함게 복원되었었음

11월 6일:
(1) Atom - PHP로 각 연어당 원문 표시 성공!!!
(2) Pycharm - 연어별로 한 번에 원문 추출하는 코드 작성, 세종 코퍼스 중복 오류 수정(BTJO0443)

11월 7일:
(1) PyCharm - list.clear() 방식(1,170초)과 매번 list를 생성하는 방식(959초)으로 collect_examples_at_once 연산 속도 비교

11월 9일:
(1) PyCharm - numpy 사용해보려고 했으나, 문자열 처리에는 신통치 않은 거 같음
(2) Atom - 표에서 표 띄우기 - OnClick(), AJAX 등 알아봤지만 일단 details로 하기로 우회
(3) Atom - 표에서 column이 밀리지 않게 하려했으나 삽질만 하고 실패 ㅜㅜ -->> 안 밀리게 성공!!!!!!!!!!! + 예문 표시도 깔끔하게 성공!
(4) Atom - 검색 단어별로 예문 파일 읽을 수 있도록 action.php 코드 수정

11월 10일:
(1) Pycharm - 세종 말뭉치 수정한 거 바탕으로 아침부터 밤까지 데이터 새로 뽑고 있음
(2) Atom - CSS 공부하면서 홈페이지 조금씩 수정
(3) Atom - 연어 이모티콘 추가
(4) Pycharm - 연어 빈도수보다 많은 예문이 표시되는 이유가 뭐지? 저번에 알았다고 생각했는데 다시 모르겠음 -> 아오 알았다. '여러 번 달린 사람' 10회 / '달린 사람' 20회라고 할 때, 여러 번 달린 사람은 예문도 10회지만, 달린 사람은 예문 30회임, 즉 mover가 '달린 사람' 이상으로 더 갈일이 많았지만, 나중에 regex로 찾을 때는 '달린 사람'으로 '여러 번 달린 사람'도 매칭됨

11월 11일:
(1) Pycharm - collocation하고 example 한번에 뽑는데 성공! -> 연산 시간 엄청나게 단축
(2) Pycharm - 예문에 출처 넣기 성공!

11월 12일:
(1) Atom - 형태는 같지만 품사가 다른 형태소 표시할 수 있는 페이지 만들기 예: 차다/동사, 차다/형용사
(2) Atom - *.php에서 클릭(a href)으로 다른 *.php로 데이터 넘기는 법 2시간 삽질만에 파악!!!!
(3) Atom - copyright 섹션 좌우로 짤리는거 해결

11월 13일:
(1) Pycharm - find_collocation_at_once_with_examples로 NNG, VV, VA 돌린 결과 검토
(2) Atom - 품사가 2개 이상일 경우 중간 페이지로 가고, 1개면 원래대로 collocation 띄워주도록 코드 완성
(3) Pycharm - example 최대 100개만 뽑게 수정 (1~100.txt)

11월 14일:
(1) Atom - AJAX 조금 공부

11월 15일:
(1) Atom - AJAX 연습 완료
(2) Atom - Node.js 설치 및 연습 완료
(3) 할것 - Node.js로 한국어연어검색기 메인화면 띄우기(html은 되는데 css가 적용 안됨), AJAX 및 Node.js로 기존에 구현한 상태 다시 구현하기 - POST로 전달되는 데이터 node.js에서 받기

11월 18일:
(1) Atom - Node.js로 html + css 띄우는데 성공!!!
(2) Atom - 일단 express 기본 구조 갖추어 놓음 // node.js를 공부하는겨 express를 공부하는겨?

11월 20일:
(1) Atom - Express에서 헤맴

11월 21일:
(1) Atom - 드디어 메인화면에서 입력(예: 걷다) 받아서, 파일 시스템에서 걷다.txt 읽은 후, 새로운 창에 결과 보여주는 거 성공!! // Node.js
(2) Atom - module.exports가 무슨 의미인지 이해함

11월 22일:
(1) Atom - 미친 삽질 - Node.js의 Asynchronous한 특성 때문에, 한참 삽질하다가 일단 readFileSync로 우회해서 해결
(2) Atom - JSON으로 action.js에서 action_page.html로 데이터 전달 (대표님이 말한 게 이게 맞나?)
(3) Atom - 드디어 이전에 php로 테이블 표시했던 거랑 거의 동일하게 node.js + javascript로 구현하는 데 성공 (example 표시는 구현 안함)

11월 23일:
(1) Atom - 파일 검색했을 때 없는 경우, 결과가 1개인 경우, 2개인 경우 모두 처리
(2) Atom - 표 화면에서 바로 검색할 수 있게 하기 - AJAX 성공!!!
(3) Atom - JSON 어느 정도 이해함 - JSON.parse(), JSON.stringify()

11월 24일:
(1) Atom - W3.CSS 적용!

11월 25일:
(1) Atom - 예문 열고 닫기, AJAX로 구현
(2) Atom - 이전에 php로 했던거 전부다 구현, 코드 정리함

11월 26일:
(1) Pycharm - 공공데이터포털에서 관광 스토리텔링 텍스트 정보 획득 후 형태소 분석 실시
(2) Pycharm - 크롤링 배워서 ITDaily 크롤링 성공!
(3) Pycharm - 2016 관광 스토리텔링 형태소 분석하고 연어/예문 추출했으나 데이터 크기가 너무 작음
(4) Pycharm - ITDaily 형태소 분석 (넘 오래 걸림 - 노트북 혹사..)

11월 27일:
(1) Pycharm - ITDaily 기사 30,000개 크롤링 - 파일이 너무 많아짐
(2) Pycharm - 꼬꼬마 형태소 분석시, 원문과 분석 결과 매치할 수 있는 방법 없는지 조금 알아봄
(3) Atom/Pycharm - MongoDB 설치 후 조금 연습

11월 28일:
(1) 데이터 - ITDaily 연어 추출한 결과 확인, 세종이랑 비교 (꼬꼬마가 고유명사 식별을 너무 못함, 별도로 사전 만들어야 할듯)
(2) 데이터 - 표준국어대사전에 있는 체언/용언 상세 정보 및 연어 사전 확인 - 연어 정보가 있는 것도 있고 없는 것도 있고... 굳이 뽑아서 쓸 필요가?
(3) 데이터 - 한국민족문화대백과사전 크롤링해서 MongoDB에 저장

Next stage:
(1) 홈페이지 소개글 작성
(2) 먹/VV + 는/ETM을 먹는으로 복원하여 표시

# Crawling 후보
한국민족문화대백과사전
2016 관광 스토리텔링 텍스트 정보

# Atom
홈페이지 -Que haras html, css요소 연습하고 스크롤바랑 표 만들기

# Pycharm
한자처리: examples/가다/1.txt 6번 라인 참조
특수문자처리: examples/나다/1.txt 3번 라인 참조
순/NNG + 으로/JKB + 나타나/VV -> 순으로 나타나다 // 이렇게 표시하기, 그렇게 하기 위해 품사별 띄어쓰기 조합 규칙, 음운 변화 규칙 작성해서 원문 구현하기
BTEO0080 중복있는 듯? 함께 끌려가서 장작쪽으로 두들겨맞곤 했던 남로당 패거리들이 모두 붉은 완장 하나씩을 차고 날뛰고 있었다.
BTGO0363 중복? 질질 개 끌 듯이 끌어다간 거꾸로 개울물에다 처박았다.
사이좋다 -> 에러

# 디버깅 명령어
set DEBUG=KoreanCollocationSearcher:* & npm start

time stamp: 22:10